factorialRecursive: 
Type:  function(int) -> int

########################################################
Before intra-basic-block optimization
--------------------------------------------------------
0:  ASSIGN int const__1 (= 1)  int res 
1:  IF_GREATER int n int const__2 (= 1) 3
2:  GOTO 9
3:  MINUS int n int const__3 (= 1) int anon__1 
4:  PARAM int anon__1   
5:  CALL factorialRecursive: function(int) -> int   
6:  GETRETURN   int anon__2 
7:  TIMES int n int anon__2 int anon__3 
8:  ASSIGN int anon__3  int res 
9:  RETURN int res   


optimizing basic block 0 - 1
ASSIGN int const__1 (= 1)  int res 
IF_GREATER int n int const__2 (= 1) 3
ASSIGN int const__1 (= 1)  int res 
IF_GREATER int n int const__2 (= 1) 3
Node 0x61c180 (Opcode = -1) (jmp dest = -1) Symbols: [ const__1 res ]   Leaves: [ const__1 res ]Node 0x61c1b0 (Opcode = -1) (jmp dest = -1) Symbols: [ n ]   Leaves: [ n ]Node 0x61c1e0 (Opcode = IF_GREATER) Left = 0x61c1b0 Right = 0x61c180  (jmp dest = 3) Symbols: [ ]   Leaves: [ ]

optimizing basic block 2 - 2
GOTO 9
GOTO 9
Node 0x61c180 (Opcode = GOTO) Left = (nil) Right = (nil)  (jmp dest = 9) Symbols: [ ]   Leaves: [ ]

optimizing basic block 3 - 8
MINUS int n int const__3 (= 1) int anon__1 
PARAM int anon__1   
CALL factorialRecursive: function(int) -> int   
GETRETURN   int anon__2 
TIMES int n int anon__2 int anon__3 
ASSIGN int anon__3  int res 
MINUS int n int const__3 (= 1) int anon__1 
PARAM int anon__1   
CALL factorialRecursive: function(int) -> int   
GETRETURN   int anon__2 
TIMES int n int anon__2 int anon__3 
ASSIGN int anon__3  int res 
Node 0x61c180 (Opcode = -1) (jmp dest = -1) Symbols: [ n ]   Leaves: [ n ]Node 0x61c1b0 (Opcode = -1) (jmp dest = -1) Symbols: [ const__3 ]   Leaves: [ const__3 ]Node 0x61c1e0 (Opcode = MINUS) Left = 0x61c180 Right = 0x61c1b0  (jmp dest = -1) Symbols: [ anon__1 ]   Leaves: [ anon__1 ]Node 0x61c210 (Opcode = PARAM) Left = 0x61c1e0 Right = (nil)  (jmp dest = -1) Symbols: [ ]   Leaves: [ ]Creating anonymous symbol
Node 0x61c240 (Opcode = -1) (jmp dest = -1) Symbols: [ factorialRecursive ]   Leaves: [ factorialRecursive ]Node 0x61c270 (Opcode = CALL) Left = 0x61c240 Right = (nil)  (jmp dest = -1) Symbols: [ ]   Leaves: [ ]Creating anonymous symbol
Node 0x61c2a0 (Opcode = -1) (jmp dest = -1) Symbols: [ anon__2 ]   Leaves: [ anon__2 ]Node 0x61c2d0 (Opcode = GETRETURN) Left = 0x61c2a0 Right = (nil)  (jmp dest = -1) Symbols: [ ]   Leaves: [ ]Creating anonymous symbol
Node 0x61c300 (Opcode = -1) (jmp dest = -1) Symbols: [ n ]   Leaves: [ n ]Node 0x61c330 (Opcode = TIMES) Left = 0x61c300 Right = 0x61c2a0  (jmp dest = -1) Symbols: [ anon__3 res ]   Leaves: [ anon__3 res ]

optimizing basic block 9 - 9
RETURN int res   
RETURN int res   
Node 0x61c180 (Opcode = -1) (jmp dest = -1) Symbols: [ res ]   Leaves: [ res ]Node 0x61c1b0 (Opcode = RETURN) Left = 0x61c180 Right = (nil)  (jmp dest = -1) Symbols: [ ]   Leaves: [ ]

########################################################
After intra-basic-block optimization
--------------------------------------------------------
0:  ASSIGN int const__1 (= 1)  int res 
1:  IF_GREATER int n int res 3
2:  GOTO 8
3:  MINUS int n int const__3 (= 1) int anon__1 
4:  PARAM int anon__1  <type not declared> anon__4 
5:  CALL factorialRecursive: function(int) -> int  <type not declared> anon__5 
6:  GETRETURN int anon__2  <type not declared> anon__6 
7:  TIMES int n int anon__2 int res 
8:  RETURN int res   





WARNING: function main doesn't end with a return statement.
WARNING: the return value will be garbage!
main: 
Type:  function() -> int

########################################################
Before intra-basic-block optimization
--------------------------------------------------------
0:  PARAM int const__4 (= 10)   
1:  CALL factorialRecursive: function(int) -> int   
2:  GETRETURN   int anon__7 
3:  ASSIGN int anon__7  int b 
4:  WRITE int b   
5:  RETURN    


########################################################
After intra-basic-block optimization
--------------------------------------------------------
0:  PARAM int const__4 (= 10)   
1:  CALL factorialRecursive: function(int) -> int   
2:  GETRETURN   int anon__7 
3:  ASSIGN int anon__7  int b 
4:  WRITE int b   
5:  RETURN    







#####################################################
#               OPTIMISATION PHASE                  #
#####################################################

Peephole optimization for function factorialRecursive: round 0 improved the instructions
Peephole optimization for function factorialRecursive: round 1 didn't change the instructions
Peephole optimization for function main: round 0 didn't change the instructions


#####################################################
#            END OF OPTIMISATION PHASE              #
#####################################################

Segmentation fault (core dumped)
